// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
id              String   @id @default(auto()) @map("_id") @db.ObjectId
name            String
email           String   @unique
phone           String
password        String?
status          String   @default("pending") // pending, active, suspended
creditLimit     Float    @default(5000)
creditUsed      Float    @default(0)
registrationDate DateTime @default(now())
isAdmin         Boolean  @default(false)
lastLoginDate   DateTime?
// Relations
orders          Order[]
payments        Payment[]
notifications   Notification[]
@@map("users")
}
model Product {
id          String   @id @default(auto()) @map("_id") @db.ObjectId
name        String
description String
price       Float
images      String[]
active      Boolean  @default(true)
createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt
// Relations
orderItems  OrderItem[]
@@map("products")
}
model Order {
id              String   @id @default(auto()) @map("_id") @db.ObjectId
orderDate       DateTime @default(now())
status          String   @default("pending") // pending, approved, completed, canceled
totalAmount     Float
paidAmount      Float    @default(0)
remainingAmount Float
isPaidFully     Boolean  @default(false)
// Relations
userId          String   @db.ObjectId
user            User     @relation(fields: [userId], references: [id])
orderItems      OrderItem[]
payments        Payment[]
@@map("orders")
}
model OrderItem {
id              String   @id @default(auto()) @map("_id") @db.ObjectId
quantity        Int
priceAtPurchase Float
subtotal        Float
// Relations
orderId         String   @db.ObjectId
order           Order    @relation(fields: [orderId], references: [id])
productId       String   @db.ObjectId
product         Product  @relation(fields: [productId], references: [id])
@@map("orderItems")
}
model Payment {
id            String   @id @default(auto()) @map("_id") @db.ObjectId
amount        Float
paymentDate   DateTime @default(now())
paymentMethod String
recordedBy    String
notes         String?
// Relations
userId        String   @db.ObjectId
user          User     @relation(fields: [userId], references: [id])
orderId       String?  @db.ObjectId
order         Order?   @relation(fields: [orderId], references: [id])
@@map("payments")
}
model Notification {
id          String   @id @default(auto()) @map("_id") @db.ObjectId
type        String   // registration, order, payment, reminder
message     String
isRead      Boolean  @default(false)
createdAt   DateTime @default(now())
readAt      DateTime?
referenceId String?  @db.ObjectId // Order ID or other relevant ID
// Relations
userId      String   @db.ObjectId
user        User     @relation(fields: [userId], references: [id])
@@map("notifications")
}