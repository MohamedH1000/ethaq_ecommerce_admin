// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  images    String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("categories")
}
model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String    @unique
  phone           String?   @unique
  email           String?  @unique
  password        String?
  image           String?
  remainingAmount Float    @default(0)
  paidAmount      Float    @default(0)
  balance         Float?   @default(0)
  status          String   @default("pending") // pending, active, suspended
  creditLimit     Float    @default(5000)
  creditUsed      Float    @default(0)
  registrationDate DateTime @default(now())
  isAdmin         Boolean  @default(false)
  lastLoginDate   DateTime?
  // Relations
  addresses       Address[] // Relation to Address model
  orderItems      OrderItem[]
  orders          Order[]
  payments        Payment[]
  notifications   Notification[]
  @@map("users")
}
model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  postcode  String?
  createdAt DateTime @default(now())
  orders          Order[]
  @@map("addresses")
}


model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int @default(1)
  priceAtPurchase Float
  subtotal        Float?
  // Relations
  orderId         String?   @db.ObjectId
  order           Order?    @relation(fields: [orderId], references: [id])
  userId          String   @db.ObjectId
  user            User?     @relation(fields: [userId], references: [id])
  productId       String   @db.ObjectId
  product         Product?  @relation(fields: [productId], references: [id])
  @@map("orderItems")
}
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  discount    Float? @default(0)
  images      String[]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  orderItems  OrderItem[]
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  @@map("products")
}
model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderDate       DateTime @default(now())
  status          String   @default("pending") // pending, approved, completed, canceled
  totalAmount     Float
  paidAmount      Float    @default(0)
  remainingAmount Float
  isPaidFully     Boolean  @default(false)
  isDelivered     Boolean @default(false)
  confirmNo       String?
  // Relations
  userId          String   @db.ObjectId
  addressId       String?   @db.ObjectId
  user            User?     @relation(fields: [userId], references: [id])
  address         Address?  @relation(fields: [addressId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]
  @@map("orders")
}
model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentDate   DateTime @default(now())
  paymentMethod String?
  recordedBy    String?
  notes         String?
  // Relations
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  orderId       String?  @db.ObjectId
  order         Order?   @relation(fields: [orderId], references: [id])
  @@map("payments")
}
model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // registration, order, payment, reminder
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  readAt      DateTime?
  referenceId String?  @db.ObjectId // Order ID or other relevant ID
  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  @@map("notifications")
}